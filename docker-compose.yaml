services:
  postgres:
    image: debezium/postgres
    environment:
      POSTGRES_USER: demo
      POSTGRES_PASSWORD: password
      POSTGRES_DB: db
    command: ["postgres", "-c", "wal_level=logical"]
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s

  kafka:
    image: apache/kafka
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_LISTENERS: INTERNAL://:9092,EXTERNAL://:29092,CONTROLLER://:9093
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:9092,EXTERNAL://localhost:29092
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka:9093
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_NUM_PARTITIONS: 1

  debezium_connect:
    image: quay.io/debezium/connect:3.0
    links:
      - postgres
      - kafka
    environment:
      BOOTSTRAP_SERVERS: kafka:9092
      GROUP_ID: 1
      CONFIG_STORAGE_TOPIC: my_connect_configs
      OFFSET_STORAGE_TOPIC: my_connect_offsets
      STATUS_STORAGE_TOPIC: my_connect_statuses

  pushpin:
    image: fanout/pushpin
    ports:
      - 8000:7999
    volumes:
      - ./pushpin/routes:/etc/pushpin/routes
    depends_on:
      - server

  server:
    build: ./server
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_DB: db
      POSTGRES_USER: demo
      POSTGRES_PASSWORD: password
      KAFKA_HOST: kafka
      PUSHPIN_INTERNAL_HOST: pushpin
      PUSHPIN_EXTERNAL_HOST: localhost
    develop:
      # Create a `watch` configuration to update the appl
      # https://docs.docker.com/compose/file-watch/#compose-watch-versus-bind-mounts
      watch:
        # Sync the working directory with the `/app` directory in the container
        - action: sync
          path: ./server/app
          target: /server/app
          # Exclude the project virtual environment â€” it could be for a
          # different platform in the container
          ignore:
            - .venv/
        # Rebuild the image if dependencies change by checking uv.lock
        - action: rebuild
          path: ./server/uv.lock
    restart: always
    depends_on:
      postgres:
        condition: service_healthy

  # setup
  postgres_setup:
    image: flyway/flyway
    command: -configFiles=conf/flyway.conf migrate
    volumes:
      - ./flyway/sql:/flyway/sql
      - ./flyway/conf:/flyway/conf
    depends_on:
      postgres:
        condition: service_healthy

  debezium_setup:
    image: alpine/curl
    links:
      - debezium_connect
    volumes:
      - ./debezium:/deb_conf
    working_dir: /deb_conf
    command: --retry 5 --retry-max-time 120 --retry-connrefused -i -X POST -H "Accept:application/json" -H  "Content-Type:application/json" debezium_connect:8083/connectors/ -d @register-postgres.json
